/* OpenCA libpki package
* (c) 2000-2007 by Massimiliano Pala and OpenCA Group
* All Rights Reserved
*
* ===================================================================
* Released under OpenCA LICENSE
*/

#ifndef _LIBPKI_PKI_DATATYPES_H
#define _LIBPKI_PKI_DATATYPES_H	

#ifndef _LIBPKI_COMPAT_H
# include <libpki/compat.h>
#endif

#ifdef ENABLE_OQS
# include <oqs/oqsconfig.h>
#endif

#ifndef HEADER_OCSP_H
#include <openssl/ocsp.h>
#endif

BEGIN_C_DECLS 

/* PKI Datatypes */
typedef enum {
	/* Driver(s) Datatype */
	PKI_DATATYPE_UNKNOWN = 0,
	PKI_DATATYPE_ANY,
	PKI_DATATYPE_APPLICATION,
	PKI_DATATYPE_PUBKEY,
	PKI_DATATYPE_PRIVKEY,
	PKI_DATATYPE_SECRET_KEY,
	PKI_DATATYPE_CRED,
	/* X509 types */
	PKI_DATATYPE_X509_EXTENSION,
	PKI_DATATYPE_X509_KEYPAIR,
	PKI_DATATYPE_X509_CERT,
	PKI_DATATYPE_X509_CRL,
	PKI_DATATYPE_X509_REQ,
	PKI_DATATYPE_X509_PKCS7,
	PKI_DATATYPE_X509_CMS,
	PKI_DATATYPE_X509_PKCS12,
	PKI_DATATYPE_X509_OCSP_REQ,
	PKI_DATATYPE_X509_OCSP_RESP,
	PKI_DATATYPE_X509_PRQP_REQ,
	PKI_DATATYPE_X509_PRQP_RESP,
	PKI_DATATYPE_X509_XPAIR,
	PKI_DATATYPE_X509_CMS_MSG,
	/* Non-X509 types */
	PKI_DATATYPE_EST_MSG,
	PKI_DATATYPE_SCEP_MSG,
	/* Custom Type */
	PKI_DATATYPE_CUSTOM,
	/* Used in PKCS11 driver */
	PKI_DATATYPE_X509_CA,
	PKI_DATATYPE_X509_TRUSTED,
	PKI_DATATYPE_X509_OTHER
} PKI_DATATYPE;

#define PKI_DATATYPE_SIZE          26

/* Token Datatypes */
typedef enum {
	PKI_TOKEN_DATATYPE_UNKNOWN = 0,
	PKI_TOKEN_DATATYPE_KEYPAIR,
	PKI_TOKEN_DATATYPE_PRIVKEY,
	PKI_TOKEN_DATATYPE_PUBKEY,
	PKI_TOKEN_DATATYPE_CERT,
	PKI_TOKEN_DATATYPE_CACERT,
	PKI_TOKEN_DATATYPE_TRUSTEDCERT,
	PKI_TOKEN_DATATYPE_OTHERCERT,
	PKI_TOKEN_DATATYPE_CRL,
	PKI_TOKEN_DATATYPE_CRED,
	PKI_TOKEN_DATATYPE_NICKNAME,
	PKI_TOKEN_DATATYPE_IDENTITY
} PKI_TOKEN_DATATYPE;

#define PKI_TOKEN_DATATYPE_SIZE    12

typedef enum {
	/* Usual Ok */
	PKI_TOKEN_STATUS_OK							= 0,
	// General Setup Errors
	PKI_TOKEN_STATUS_INIT_ERR           		= 1,
	PKI_TOKEN_STATUS_LOGIN_ERR					= 2,
	// Key Crypto Errors
	PKI_TOKEN_STATUS_KEYPAIR_LOAD				= 4,
	PKI_TOKEN_STATUS_KEYPAIR_CHECK_ERR  		= 8,
	PKI_TOKEN_STATUS_KEYPAIR_MISSING_ERR 		= 16,
	// Missing Data Errors
	PKI_TOKEN_STATUS_CERT_MISSING_ERR			= 32,
	PKI_TOKEN_STATUS_CACERT_MISSING_ERR			= 64,
	PKI_TOKEN_STATUS_OTHERCERTS_MISSING_ERR		= 128,
	PKI_TOKEN_STATUS_TRUSTEDCERTS_MISSING_ERR 	= 1024,
	// Generic Errors
	PKI_TOKEN_STATUS_MEMORY_ERR					= 2048,
	PKI_TOKEN_STATUS_UNKNOWN					= 4096,
	// More Specific Errors
	PKI_TOKEN_STATUS_HSM_ERR			 		= 8192,
} PKI_TOKEN_STATUS;

#define PKI_TOKEN_STATUS_SIZE      10

/* Data Export Format */
typedef enum {
	PKI_DATA_FORMAT_UNKNOWN		= 0,
	PKI_DATA_FORMAT_PEM,
	PKI_DATA_FORMAT_ASN1,
	PKI_DATA_FORMAT_B64,
	PKI_DATA_FORMAT_TXT,
	PKI_DATA_FORMAT_XML,
	PKI_DATA_FORMAT_URL
} PKI_DATA_FORMAT;

#define PKI_DATA_FORMAT_SIZE        7
#define PKI_DATA_FORMAT_START       PKI_DATA_FORMAT_PEM
#define PKI_DATA_FORMAT_END         PKI_DATA_FORMAT_URL

typedef enum {
	PKI_DATA_FORMAT_FLAG_NONE		      = 0,
	PKI_DATA_FORMAT_FLAG_B64_SKIPNEWLINES = 1
} PKI_DATA_FORMAT_FLAG;

#define PKI_DATA_FORMAT_FLAG_SIZE   2

typedef enum {
	PKI_FORMAT_UNDEF		= 0,
	PKI_FORMAT_CMS,
	PKI_FORMAT_SCEP,
	PKI_FORMAT_NETSCAPE,
	PKI_FORMAT_PKCS11,
	PKI_FORMAT_SMIME,
	PKI_FORMAT_ENGINE
} PKI_FORMAT;

#define PKI_FORMAT_SIZE			7

/* Supported Datatype for retrieving data from an X509 data object */
typedef enum {
	PKI_X509_DATA_SERIAL		= 0,
	PKI_X509_DATA_VERSION,
	PKI_X509_DATA_SUBJECT,
	PKI_X509_DATA_ISSUER,
	PKI_X509_DATA_NOTBEFORE,
	PKI_X509_DATA_NOTAFTER,
	PKI_X509_DATA_THISUPDATE,
	PKI_X509_DATA_LASTUPDATE,
	PKI_X509_DATA_NEXTUPDATE,
	PKI_X509_DATA_PRODUCEDAT,
	PKI_X509_DATA_ALGORITHM,
	PKI_X509_DATA_KEYSIZE,
	PKI_X509_DATA_KEYPAIR_VALUE,
	PKI_X509_DATA_X509_PUBKEY,
	PKI_X509_DATA_PUBKEY_BITSTRING,
	PKI_X509_DATA_PRIVKEY,
	PKI_X509_DATA_SIGNATURE,
	PKI_X509_DATA_SIGNATURE_ALG1,
	PKI_X509_DATA_SIGNATURE_ALG2,
	PKI_X509_DATA_TBS_MEM_ASN1,
	PKI_X509_DATA_SIGNER_CERT,
	PKI_X509_DATA_SIGNATURE_CERTS,
	PKI_X509_DATA_PRQP_SERVICES,
	PKI_X509_DATA_PRQP_STATUS_STRING,
	PKI_X509_DATA_PRQP_STATUS_VALUE,
	PKI_X509_DATA_PRQP_REFERRALS,
	PKI_X509_DATA_PRQP_CAID,
	PKI_X509_DATA_NONCE,
	PKI_X509_DATA_CERT_TYPE,
	PKI_X509_DATA_EXTENSIONS
} PKI_X509_DATA;

#define PKI_X509_DATA_SIZE     30

typedef enum {
	PKI_X509_CERT_TYPE_UNKNOWN	= 0,
	PKI_X509_CERT_TYPE_CA		= (1<<0),
	PKI_X509_CERT_TYPE_USER		= (1<<1),
	PKI_X509_CERT_TYPE_SERVER	= (1<<2),
	PKI_X509_CERT_TYPE_PROXY	= (1<<3),
	PKI_X509_CERT_TYPE_ROOT		= (1<<4)
} PKI_X509_CERT_TYPE;

#define PKI_X509_CERT_TYPE_SIZE  6

typedef enum {
	PKI_RSA_KEY_MIN_SIZE		= 1024,
	PKI_DSA_KEY_MIN_SIZE		= 2048,
	PKI_EC_KEY_MIN_SIZE		    = 128
} PKI_KEY_MIN_SIZE;

typedef enum {
	PKI_RSA_KEY_DEFAULT_SIZE	= 2048,
	PKI_DSA_KEY_DEFAULT_SIZE	= 2048,
	PKI_EC_KEY_DEFAULT_SIZE		= 256,
} PKI_KEY_DEFAULT_SIZE;

/* Supported Signing schemes identifiers */
typedef enum {
	// Classic/Modern Cryptography
	PKI_SCHEME_UNKNOWN 	= 0,
	PKI_SCHEME_RSA,
	PKI_SCHEME_RSAPSS,
	PKI_SCHEME_DSA,
#ifdef ENABLE_ECDSA
	// ECDSA signature scheme
	PKI_SCHEME_ECDSA,
#endif
	// ED signature schemes
	PKI_SCHEME_ED448,
	PKI_SCHEME_ED25519,

	// Key-Exchange based on Diffie-Hellman
	PKI_SCHEME_DH,

	// Key-Exchange based on ED
	PKI_SCHEME_X448,
	PKI_SCHEME_X25519,

#ifdef ENABLE_OQS
	// Post Quantum Cryptography - KEMS
#ifdef OQS_ENABLE_KEM_NTRU
	PKI_SCHEME_NTRU_PRIME,
#endif
// #ifdef OQS_ENABLE_KEM_SIKE
// 	PKI_SCHEME_SIKE,
// #endif
#ifdef OQS_ENABLE_KEM_BIKE
	PKI_SCHEME_BIKE,
#endif
#ifdef OQS_ENABLE_KEM_FRODOKEM
	PKI_SCHEME_FRODOKEM,
#endif
#ifdef OQS_ENABLE_KEM_CLASSIC_MCELIECE
	PKI_SCHEME_CLASSIC_MCELIECE,
#endif
#ifdef OQS_ENABLE_KEM_KYBER
	PKI_SCHEME_KYBER,
#endif
	// Post Quantum Cryptography - Digital Signatures
#ifdef OQS_ENABLE_SIG_FALCON
	PKI_SCHEME_FALCON,
#endif
	PKI_SCHEME_SPHINCS,
#ifdef OQS_ENABLE_SIG_DILITHIUM
	PKI_SCHEME_DILITHIUM,
	// Experimental Only - To Be Removed (DilithiumX)
	PKI_SCHEME_DILITHIUMX3,
#endif
#ifdef OQS_ENABLE_SIG_PICNIC
	PKI_SCHEME_PICNIC,
#endif
#endif // End of ENABLE_OQS

#ifdef ENABLE_COMPOSITE
	// Composite Crypto Schemes
	PKI_SCHEME_COMPOSITE,
	// Explicit Composite Crypto Schemes
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM3_RSA,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM3_P256,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM3_BRAINPOOL256,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM3_ED25519,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM5_P384,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM5_BRAINPOOL384,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM5_ED448,
	PKI_SCHEME_COMPOSITE_EXPLICIT_FALCON512_P256,
	PKI_SCHEME_COMPOSITE_EXPLICIT_FALCON512_BRAINPOOL256,
	PKI_SCHEME_COMPOSITE_EXPLICIT_FALCON512_ED25519,
	PKI_SCHEME_COMPOSITE_EXPLICIT_SPHINCS256_P256,
	PKI_SCHEME_COMPOSITE_EXPLICIT_SPHINCS256_BRAINPOOL256,
	PKI_SCHEME_COMPOSITE_EXPLICIT_SPHINCS256_ED25519,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM3_RSAPSS,
	PKI_SCHEME_COMPOSITE_EXPLICIT_FALCON512_RSA,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM5_FALCON1024_P521,
	PKI_SCHEME_COMPOSITE_EXPLICIT_SPHINCS256_RSA,
	PKI_SCHEME_COMPOSITE_EXPLICIT_DILITHIUM5_FALCON1024_RSA,
#endif
#ifdef ENABLE_COMPOSITE
	// Combined Crypto Schemes
	PKI_SCHEME_COMBINED,
#endif

} PKI_SCHEME_ID;

#define PKI_SCHEME_DEFAULT		PKI_SCHEME_RSA

#define CRL_OK			        1
#define	CRL_NOT_YET_VALID	    2
#define	CRL_EXPIRED		        3
#define	CRL_ERROR_NEXT_UPDATE	4
#define	CRL_ERROR_LAST_UPDATE	5
#define CRL_ERROR_UNKNOWN       10

#define	PKI_VALIDITY_ONE_HOUR	3600
#define PKI_VALIDITY_ONE_DAY	PKI_VALIDITY_ONE_HOUR*24
#define PKI_VALIDITY_ONE_WEEK	PKI_VALIDITY_ONE_DAY*7
#define PKI_VALIDITY_ONE_MONTH	PKI_VALIDITY_ONE_DAY*30
#define PKI_VALIDITY_ONE_YEAR	PKI_VALIDITY_ONE_DAY*365

typedef enum {
	PKI_X509_CRL_REASON_ERROR 						= -1,
	PKI_X509_CRL_REASON_UNSPECIFIED					= 0,
	PKI_X509_CRL_REASON_KEY_COMPROMISE				= 1,
	PKI_X509_CRL_REASON_CA_COMPROMISE				= 2,		
	PKI_X509_CRL_REASON_AFFILIATION_CHANGED			= 3,
	PKI_X509_CRL_REASON_SUPERSEDED					= 4,
	PKI_X509_CRL_REASON_CESSATION_OF_OPERATION		= 5,
	PKI_X509_CRL_REASON_CERTIFICATE_HOLD			= 6,
	// Value #7 is not used
	PKI_X509_CRL_REASON_REMOVE_FROM_CRL				= 8,
	PKI_X509_CRL_REASON_PRIVILEGE_WITHDRAWN			= 9,
	PKI_X509_CRL_REASON_AA_COMPROMISE				= 10,	
	// Hold instructions
	PKI_X509_CRL_REASON_HOLD_INSTRUCTION_REJECT		= 0xA2,
	PKI_X509_CRL_REASON_HOLD_INSTRUCTION_CALLISSUER	= 0xA3,
} PKI_X509_CRL_REASON;

typedef struct __pkiCrlReasonCodes_st {
	int code;
	const char *name;
	const char *descr;
} PKI_X509_CRL_REASON_CODE;

typedef enum {
	PKI_MUTEX_READ		= 0,
	PKI_MUTEX_WRITE		= 1,
} PKI_MUTEX_METHOD;

#define PKI_IO			BIO
#define PKI_IO_new		BIO_new
#define PKI_IO_write	BIO_write
#define PKI_IO_read		BIO_read
#define PKI_IO_free		BIO_free_all

// ============
// OCSP support
// ============

typedef enum {
	PKI_OCSP_CERTSTATUS_GOOD 	= V_OCSP_CERTSTATUS_GOOD,
	PKI_OCSP_CERTSTATUS_REVOKED	= V_OCSP_CERTSTATUS_REVOKED,
	PKI_OCSP_CERTSTATUS_UNKNOWN	= V_OCSP_CERTSTATUS_UNKNOWN
} PKI_OCSP_CERTSTATUS;

typedef enum {
	PKI_X509_OCSP_RESP_STATUS_SUCCESSFUL 			= 0,
	PKI_X509_OCSP_RESP_STATUS_MALFORMEDREQUEST		= 1,
	PKI_X509_OCSP_RESP_STATUS_INTERNALERROR 		= 2,
	PKI_X509_OCSP_RESP_STATUS_TRYLATER 			    = 3,
	PKI_X509_OCSP_RESP_STATUS_SIGREQUIRED 			= 5,
	PKI_X509_OCSP_RESP_STATUS_UNAUTHORIZED 			= 6
} PKI_X509_OCSP_RESP_STATUS;

END_C_DECLS

#endif
